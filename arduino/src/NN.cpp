#include "NN.h"
#define NumberOf(arg) ((unsigned int) (sizeof (arg) / sizeof (arg [0])))
#define _2_OPTIMIZE B01000000
#define ACTIVATION__PER_LAYER
#define Sigmoid //0
#define Tanh // 1

#include "NeuralNetwork.h"

//fonction d'activation:
byte activation_func[] = {   1,0};

//layers
const unsigned int layers[] = {FLAT_OUTPUT_SIZE,4,1};
float *output  ;//sorties

float weights[] = {

  -0.005939408, -0.017255682, 0.17900297, 0.10021247, 0.31738284, 0.05275697, 0.16474837, -0.13752842, -0.12574589, -0.15963596, -0.0012369589, -0.18607922, -0.07392672, -0.060111687, 0.1587201, 0.03584148, 0.23791574, -0.15743275, 0.031272344, -0.18027586, 0.0161289, -0.29907665, -0.22665563, -0.08556892, -0.082011275, 0.1417385, -0.31280142, -0.41232842, 0.047651716, 0.0631243, 0.31704947, -0.025857208, -0.304395, 0.41021052, -0.15542506, 0.02315783, -0.26350045, -0.36337483, 0.3705846, 0.21505529, 0.16277622, -0.058963407, -0.54711735, 0.21576251, 0.4056542, 0.09547376, 0.2467393, -0.38598436, 0.46930718, 0.042110022, 0.14204471, 0.17166336, -0.31208187, 0.37902474, 0.32433492, 0.1971295, 0.11913496, -0.31285375, 0.13395986, 0.09277509, 0.20310445, -0.047336604, -0.2574624, 0.18665418, -0.19361998, 0.2235802, 0.018642304, -0.46005392, 0.14218505, 0.087681375, -0.0028263207, 0.100134864, -0.20437169, -0.34782156, -0.04164337, 0.3047815, 0.3558873, -0.32189476, -0.14400859, -0.18665496, 0.3188724, 0.1703072, -0.32067892, -0.43041426, -0.45665595, 0.08573686, 0.031278215, -0.19986795, -0.032567956, -0.16147181, 0.22232363, 0.06758345, 0.1138628, -0.122552834, -0.25227955, 0.018108591, 0.10564755, 0.13567832, -0.20267494, -0.21955605, 0.30177397, 0.17027497, 0.060056936, 0.12708825, -0.03138649, -0.07452407, 0.102943115, -0.13533427, 0.054356538, 0.122764826, 0.18833695, -0.1490984, -0.01587717, 0.18182257, 0.06507738, 
  -0.08534797, 0.22194165, -0.060587373, 0.21869344, 0.2946743, 0.023255458, -0.048455626, -0.21246557, 0.12479105, 0.052829187, -0.11827981, -0.25071153, -0.21058182, -0.001487357, -0.25774372, 0.06673189, -0.15515989, -0.26464602, 0.10509423, 0.19664757, 0.18817805, -0.3220971, -0.07868206, 0.011221338, 0.022308258, 0.25324026, -0.14916442, -0.19376145, 0.21713968, -0.29459238, -0.03736488, -0.3150809, -0.48931116, 0.30250525, 0.10519682, 0.11803467, -0.2412741, -0.2531419, 0.4887793, 0.24409945, 0.23107634, -0.28932154, -0.3301976, 0.21281707, 0.32844433, -0.066436246, 0.22997989, -0.44196126, 0.599897, 0.27399018, -0.04415815, 0.1621554, -0.18749255, 0.60724187, 0.27555585, -0.099073716, 0.10768242, -0.56595826, 0.40679893, 0.23517694, -0.022731911, 0.32267836, -0.24065934, 0.18805574, -0.025104353, -0.055605136, -0.054509833, -0.41514945, -0.123288974, -0.027435923, 0.37454635, 0.14807555, -0.14133321, -0.17815481, -0.15567052, 0.01112243, 0.2519769, -0.26720676, -0.066408195, -0.4499058, 0.032309975, -0.00052219455, -0.040559687, -0.11189497, -0.19112724, 0.053249266, 0.3009589, -0.17316175, -0.4700784, -0.10129533, 0.19929162, 0.2527325, -0.12608615, -0.34202918, -0.16809419, 0.037482977, 0.35037217, -0.031560108, 0.025374737, -0.2015251, 0.30317974, 0.3569971, -0.16985542, 0.1664343, -0.12804334, -0.11327495, 0.041098688, 0.13602377, 0.14273416, -0.15965231, -0.071375936, 0.057597123, 0.1708141, 0.24138227, 0.09300571, 
  0.07864617, -0.20295008, 0.13256368, 0.11790342, 0.08803838, -0.065782346, -0.08801439, 0.12604247, 0.04582968, -0.05586331, -0.13254766, 0.26101983, -0.07506079, 0.13287249, -0.10230942, 0.008487765, 0.083732404, 0.33431852, -0.21399328, -0.20233813, 0.06537202, 0.06129402, 0.027628712, 0.004353705, 0.05084677, -0.07223039, -0.008939833, 0.16898523, -0.20868604, 0.1720808, -0.14835003, 0.3383559, 0.2888705, -0.3515215, 0.14185877, 0.045693185, 0.108459726, 0.17660043, -0.52373856, -0.3349369, -0.08908958, 0.24326673, 0.39104444, -0.474938, -0.23625492, 0.14189795, 0.016867204, 0.17461488, -0.57039094, -0.21821758, -0.046072252, -0.23829658, 0.33646488, -0.19114375, -0.22305164, -0.02734322, -0.05358897, 0.34214312, -0.14736024, -0.034504272, -0.15256917, -0.24150062, 0.27050117, -0.08684696, -0.13475303, -0.29262438, -0.17904857, 0.338424, 0.03064814, 0.18137255, -0.1766722, -0.103710644, 0.44574404, -0.058451045, 0.30847904, -0.22329567, -0.24684647, 0.1639682, 0.3321783, 0.31055447, -0.21780738, -0.08040452, 0.25226033, 0.07970063, 0.2746179, -0.105327606, -0.32597238, 0.08652089, 0.48110813, 0.48655605, -0.051529583, -0.23888962, 0.0060055796, 0.12273232, 0.24164985, -0.0926554, -0.26196727, -0.2016986, 0.26002195, -0.05065592, 0.09686488, -0.4080031, 0.042956185, -0.1670756, -0.14283639, -0.035748806, 0.15303966, -0.12529561, 0.15004659, -0.039842695, 0.07587576, -0.07901273, -0.24908969, -0.0436753, 0.043464802, 
  -0.16654846, 0.074788585, 0.100782745, 0.08083761, -0.3118402, -0.03022821, 0.2543649, -0.0020404714, -0.19379498, 0.05926624, -0.17264968, 0.30649212, 0.1260319, -0.15934053, 0.047500215, -0.011389198, 0.12316364, -0.055990603, 0.06991788, 0.028204506, -0.25065568, 0.17048134, 0.07139819, 0.09053805, 0.108820945, -0.21069126, 0.376209, 0.31081635, -0.21254243, 0.12661156, -0.14163308, -0.015309144, 0.47569612, -0.111842886, -0.2478357, -0.29635912, 0.08941163, 0.2668706, -0.321864, -0.17802118, -0.1807234, 0.19013791, 0.19832766, -0.49101803, -0.3977412, -0.17317532, 0.048485387, 0.32586575, -0.42287672, -0.11044659, -0.046967763, -0.0025404221, 0.60042983, -0.60154265, -0.23651889, -0.015128134, -0.040963918, 0.33473906, -0.31834954, -0.19062674, -0.32029328, -0.06013759, 0.38571304, -0.088555805, 0.053521223, 0.0044853496, -0.3959122, 0.28704137, 0.035369862, 0.13283284, 0.036468826, -0.06507299, 0.12146719, 0.12910584, 0.16149879, -0.13557085, -0.276254, -0.013986501, 0.10480687, 0.35142186, -0.013772503, -0.21292736, 0.09662374, 0.19498573, 0.3749624, -0.13436833, -0.063622504, 0.325586, 0.08831479, 0.19778214, 0.0072741965, -0.31422472, 0.17700511, 0.35166228, 0.10349617, -0.23435046, -0.09662451, 0.12718053, -0.13045734, 0.13073589, -0.26675317, -0.0052081198, 0.018420635, -0.07797337, 0.24274682, -0.11954949, 0.18545134, -0.044040132, 0.05125767, -0.07336417, -0.22468135, -0.12045551, 0.14450197, -0.02210071, 0.09105656, 

  -1.0222744, -0.9683782, 1.3371273, 0.8244621, 
};

NeuralNetwork NN(layers,weights, NumberOf(layers), activation_func);

float nn(float inputs[FLAT_OUTPUT_SIZE]){
  return *(NN.FeedForward(inputs));
}
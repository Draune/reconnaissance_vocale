#include <Arduino.h>
#include "convolution.h"
#include "maxpool.h"
#include "flatten.h"
#include "CNNdata.h"

float test_in[CNNDATA_INPUT_SIZE_X][CNNDATA_INPUT_SIZE_Y] = { 
    {0.226, 0.249, 0.269, 0.283, 0.284, 0.330, 0.344, 0.335, 0.360, 0.356, 0.366, 0.374, 0.380},
    {0.202, 0.239, 0.276, 0.291, 0.316, 0.315, 0.340, 0.363, 0.365, 0.363, 0.377, 0.386, 0.388},
    {0.240, 0.259, 0.300, 0.306, 0.307, 0.303, 0.335, 0.345, 0.364, 0.372, 0.376, 0.383, 0.395},
    {0.234, 0.282, 0.289, 0.301, 0.303, 0.328, 0.332, 0.351, 0.361, 0.370, 0.383, 0.385, 0.385},
    {0.216, 0.252, 0.291, 0.305, 0.306, 0.314, 0.340, 0.332, 0.368, 0.372, 0.374, 0.382, 0.375},
    {0.212, 0.272, 0.269, 0.289, 0.308, 0.332, 0.351, 0.351, 0.375, 0.375, 0.366, 0.374, 0.386},
    {0.245, 0.279, 0.288, 0.278, 0.311, 0.325, 0.337, 0.350, 0.357, 0.368, 0.379, 0.375, 0.375},
    {0.239, 0.253, 0.274, 0.300, 0.310, 0.330, 0.336, 0.363, 0.357, 0.357, 0.360, 0.374, 0.382},
    {0.237, 0.284, 0.298, 0.312, 0.325, 0.319, 0.323, 0.335, 0.338, 0.367, 0.373, 0.373, 0.386},
    {0.213, 0.263, 0.272, 0.278, 0.300, 0.328, 0.359, 0.343, 0.362, 0.372, 0.384, 0.394, 0.386},
    {0.226, 0.289, 0.298, 0.297, 0.320, 0.343, 0.335, 0.344, 0.362, 0.377, 0.384, 0.375, 0.379},
    {0.229, 0.272, 0.298, 0.305, 0.297, 0.327, 0.334, 0.350, 0.371, 0.362, 0.372, 0.374, 0.381},
    {0.200, 0.268, 0.291, 0.302, 0.300, 0.305, 0.331, 0.345, 0.358, 0.361, 0.379, 0.379, 0.391},
    {0.219, 0.290, 0.298, 0.304, 0.311, 0.356, 0.412, 0.417, 0.440, 0.424, 0.392, 0.403, 0.390},
    {0.236, 0.286, 0.302, 0.334, 0.355, 0.360, 0.376, 0.366, 0.367, 0.392, 0.397, 0.410, 0.390},
    {0.222, 0.277, 0.309, 0.350, 0.369, 0.401, 0.406, 0.379, 0.356, 0.367, 0.385, 0.397, 0.387},
    {0.222, 0.287, 0.332, 0.367, 0.388, 0.386, 0.377, 0.359, 0.354, 0.380, 0.397, 0.411, 0.394},
    {0.216, 0.287, 0.321, 0.344, 0.370, 0.361, 0.364, 0.359, 0.374, 0.374, 0.395, 0.404, 0.405},
    {0.312, 0.335, 0.356, 0.373, 0.400, 0.395, 0.382, 0.365, 0.363, 0.364, 0.374, 0.391, 0.396},
    {0.363, 0.405, 0.432, 0.394, 0.399, 0.390, 0.378, 0.386, 0.389, 0.383, 0.379, 0.373, 0.390},
    {0.325, 0.397, 0.447, 0.428, 0.411, 0.385, 0.336, 0.307, 0.293, 0.306, 0.313, 0.314, 0.307},
    {0.329, 0.407, 0.443, 0.431, 0.404, 0.381, 0.321, 0.303, 0.292, 0.306, 0.314, 0.328, 0.322},
    {0.328, 0.408, 0.431, 0.422, 0.393, 0.390, 0.330, 0.309, 0.298, 0.307, 0.323, 0.331, 0.314},
    {0.323, 0.401, 0.424, 0.413, 0.374, 0.390, 0.338, 0.308, 0.300, 0.320, 0.338, 0.336, 0.315},
    {0.319, 0.401, 0.420, 0.412, 0.362, 0.388, 0.370, 0.318, 0.308, 0.336, 0.362, 0.350, 0.311},
    {0.312, 0.396, 0.417, 0.406, 0.343, 0.382, 0.387, 0.317, 0.308, 0.370, 0.408, 0.369, 0.307},
    {0.306, 0.371, 0.394, 0.383, 0.306, 0.351, 0.361, 0.321, 0.357, 0.409, 0.385, 0.362, 0.344},
    {0.299, 0.322, 0.360, 0.344, 0.277, 0.312, 0.342, 0.354, 0.384, 0.435, 0.404, 0.402, 0.382},
    {0.301, 0.324, 0.352, 0.344, 0.256, 0.279, 0.315, 0.359, 0.361, 0.441, 0.425, 0.409, 0.388},
    {0.275, 0.306, 0.339, 0.328, 0.260, 0.286, 0.303, 0.359, 0.364, 0.426, 0.424, 0.399, 0.388},
    {0.266, 0.293, 0.321, 0.314, 0.239, 0.265, 0.299, 0.389, 0.378, 0.403, 0.414, 0.399, 0.397},
    {0.248, 0.282, 0.312, 0.306, 0.257, 0.267, 0.289, 0.380, 0.372, 0.418, 0.438, 0.390, 0.383},
    {0.260, 0.291, 0.312, 0.295, 0.244, 0.253, 0.292, 0.372, 0.366, 0.495, 0.469, 0.377, 0.361},
    {0.221, 0.251, 0.285, 0.277, 0.252, 0.256, 0.288, 0.356, 0.406, 0.483, 0.397, 0.349, 0.329},
    {0.211, 0.240, 0.260, 0.262, 0.240, 0.246, 0.283, 0.319, 0.356, 0.388, 0.341, 0.309, 0.315},
    {0.185, 0.216, 0.237, 0.235, 0.201, 0.232, 0.254, 0.280, 0.283, 0.368, 0.339, 0.305, 0.307},
    {0.186, 0.214, 0.227, 0.229, 0.207, 0.229, 0.244, 0.283, 0.280, 0.344, 0.307, 0.285, 0.283},
    {0.167, 0.208, 0.230, 0.231, 0.225, 0.227, 0.245, 0.253, 0.274, 0.346, 0.311, 0.286, 0.293},
    {0.172, 0.213, 0.223, 0.211, 0.212, 0.233, 0.249, 0.261, 0.273, 0.344, 0.308, 0.289, 0.292},
    {0.176, 0.213, 0.211, 0.205, 0.192, 0.220, 0.246, 0.259, 0.279, 0.318, 0.295, 0.284, 0.294},
    {0.166, 0.189, 0.233, 0.218, 0.211, 0.225, 0.237, 0.262, 0.271, 0.309, 0.304, 0.287, 0.297},
    {0.175, 0.175, 0.227, 0.232, 0.219, 0.242, 0.260, 0.263, 0.283, 0.305, 0.302, 0.293, 0.296},
    {0.182, 0.206, 0.243, 0.228, 0.210, 0.245, 0.247, 0.249, 0.270, 0.301, 0.300, 0.302, 0.304},
    {0.148, 0.181, 0.224, 0.222, 0.219, 0.250, 0.246, 0.263, 0.277, 0.295, 0.300, 0.294, 0.289},
    {0.169, 0.180, 0.213, 0.209, 0.231, 0.246, 0.251, 0.262, 0.294, 0.312, 0.296, 0.297, 0.289},
    {0.151, 0.210, 0.213, 0.217, 0.208, 0.234, 0.257, 0.266, 0.288, 0.301, 0.303, 0.293, 0.306},
    {0.145, 0.196, 0.213, 0.217, 0.215, 0.228, 0.258, 0.260, 0.285, 0.293, 0.289, 0.302, 0.306},
    {0.345, 0.337, 0.321, 0.310, 0.305, 0.297, 0.296, 0.297, 0.309, 0.299, 0.295, 0.289, 0.305}
    };
float test_out[CONV_OUTPUT_SIZE_X][CONV_OUTPUT_SIZE_Y] = {.0f};
float test_end[POOL_OUTPUT_SIZE_X][POOL_OUTPUT_SIZE_Y] = {.0f};
float test_flat[FLAT_OUTPUT_SIZE] = {.0f};

void setup()
{
    Serial.begin(9600);
    convolution(test_in, test_out);
    maxpool(test_out, test_end);
    flatten(test_end,test_flat);

    // maxpool
    /*for (int i = 0; i < POOL_OUTPUT_SIZE_X; i++)
    {
        for (int j = 0; j < POOL_OUTPUT_SIZE_Y; j++)
        {
            Serial.print(test_end[i][j]);
            Serial.print('\t');
        }
        Serial.print('\n');
    }*/

    // flatten
    for (int i = 0; i < FLAT_OUTPUT_SIZE; i++)
    {
        Serial.print(test_flat[i]);
        Serial.print('\t');
    }
}

void loop()
{
}